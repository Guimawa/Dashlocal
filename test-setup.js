#!/usr/bin/env node

/**
 * Script de test pour v√©rifier la configuration du projet
 */

import dotenv from "dotenv";
import { getGroqClient } from "./src/utils/groq-client.js";
import JarvisBrain from "./src/core/brain.js";
import MemorySystem from "./src/core/memory.js";
import LearningSystem from "./src/core/learning.js";
import Logger from "./src/core/logger.js";

// Charger les variables d'environnement
dotenv.config();

async function testConfiguration() {
  console.log("üîç Test de configuration du projet Dashboard IA...\n");

  // Test 1: Variables d'environnement
  console.log("1. Test des variables d'environnement:");
  const hasApiKey = !!process.env.GROQ_API_KEY;
  console.log(
    `   - GROQ_API_KEY: ${hasApiKey ? "‚úÖ D√©finie" : "‚ùå Manquante"}`,
  );
  console.log(`   - PORT: ${process.env.PORT || "3000 (d√©faut)"}`);
  console.log(`   - LOG_LEVEL: ${process.env.LOG_LEVEL || "info (d√©faut)"}\n`);

  if (!hasApiKey) {
    console.log("‚ö†Ô∏è  ATTENTION: Cl√© API Groq manquante!");
    console.log("   Copiez env.example vers .env et ajoutez votre cl√© API\n");
    return false;
  }

  // Test 2: Groq Client
  console.log("2. Test du client Groq:");
  try {
    const groqClient = getGroqClient();
    console.log("   ‚úÖ Client Groq initialis√©");

    // Test simple de l'API
    const testResponse = await groqClient.sendRequest([
      { role: "user", content: 'Test de connexion - r√©ponds juste "OK"' },
    ]);

    if (testResponse.choices?.[0]?.message?.content) {
      console.log("   ‚úÖ API Groq fonctionnelle");
    } else {
      console.log("   ‚ùå R√©ponse API invalide");
    }
  } catch (error) {
    console.log(`   ‚ùå Erreur client Groq: ${error.message}`);
  }
  console.log("");

  // Test 3: Syst√®mes core
  console.log("3. Test des syst√®mes core:");

  try {
    const memory = new MemorySystem();
    console.log("   ‚úÖ MemorySystem initialis√©");

    const learning = new LearningSystem();
    await learning.initialize();
    console.log("   ‚úÖ LearningSystem initialis√©");

    const logger = new Logger("Test");
    console.log("   ‚úÖ Logger initialis√©");

    const brain = new JarvisBrain();
    console.log("   ‚úÖ JarvisBrain initialis√©");
  } catch (error) {
    console.log(`   ‚ùå Erreur syst√®me core: ${error.message}`);
  }
  console.log("");

  // Test 4: G√©n√©rateurs
  console.log("4. Test des g√©n√©rateurs:");
  try {
    const { default: ReactGenerator } = await import(
      "./src/generators/react-gen.js"
    );
    console.log("   ‚úÖ ReactGenerator import√©");

    const { default: CodeValidator } = await import(
      "./src/utils/validators.js"
    );
    console.log("   ‚úÖ CodeValidator import√©");

    const { default: CodeFormatter } = await import(
      "./src/utils/formatters.js"
    );
    console.log("   ‚úÖ CodeFormatter import√©");
  } catch (error) {
    console.log(`   ‚ùå Erreur g√©n√©rateurs: ${error.message}`);
  }
  console.log("");

  console.log("üéâ Tests de configuration termin√©s!");
  return true;
}

// Ex√©cution des tests
testConfiguration().catch(console.error);
